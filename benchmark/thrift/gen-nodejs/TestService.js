//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./test_types');
//HELPER FUNCTIONS AND STRUCTURES

TestService_test_args = function(args) {
};
TestService_test_args.prototype = {};
TestService_test_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_test_args.prototype.write = function(output) {
  output.writeStructBegin('TestService_test_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestService_test_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Test]);
    }
  }
};
TestService_test_result.prototype = {};
TestService_test_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Test();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_test_result.prototype.write = function(output) {
  output.writeStructBegin('TestService_test_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestService_send_args = function(args) {
  this.tests = null;
  if (args) {
    if (args.tests !== undefined && args.tests !== null) {
      this.tests = Thrift.copyList(args.tests, [ttypes.Test]);
    }
  }
};
TestService_send_args.prototype = {};
TestService_send_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tests = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Test();
          elem14.read(input);
          this.tests.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_send_args.prototype.write = function(output) {
  output.writeStructBegin('TestService_send_args');
  if (this.tests !== null && this.tests !== undefined) {
    output.writeFieldBegin('tests', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tests.length);
    for (var iter15 in this.tests)
    {
      if (this.tests.hasOwnProperty(iter15))
      {
        iter15 = this.tests[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestService_send_result = function(args) {
};
TestService_send_result.prototype = {};
TestService_send_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_send_result.prototype.write = function(output) {
  output.writeStructBegin('TestService_send_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestService_sendReceive_args = function(args) {
  this.tests = null;
  if (args) {
    if (args.tests !== undefined && args.tests !== null) {
      this.tests = Thrift.copyList(args.tests, [ttypes.Test]);
    }
  }
};
TestService_sendReceive_args.prototype = {};
TestService_sendReceive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.tests = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Test();
          elem22.read(input);
          this.tests.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_sendReceive_args.prototype.write = function(output) {
  output.writeStructBegin('TestService_sendReceive_args');
  if (this.tests !== null && this.tests !== undefined) {
    output.writeFieldBegin('tests', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tests.length);
    for (var iter23 in this.tests)
    {
      if (this.tests.hasOwnProperty(iter23))
      {
        iter23 = this.tests[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestService_sendReceive_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Test]);
    }
  }
};
TestService_sendReceive_result.prototype = {};
TestService_sendReceive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Test();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TestService_sendReceive_result.prototype.write = function(output) {
  output.writeStructBegin('TestService_sendReceive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TestServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TestServiceClient.prototype = {};
TestServiceClient.prototype.seqid = function() { return this._seqid; }
TestServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
TestServiceClient.prototype.test = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_test();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_test();
  }
};

TestServiceClient.prototype.send_test = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('test', Thrift.MessageType.CALL, this.seqid());
  var args = new TestService_test_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TestServiceClient.prototype.recv_test = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TestService_test_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('test failed: unknown result');
};
TestServiceClient.prototype.send = function(tests, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_send(tests);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_send(tests);
  }
};

TestServiceClient.prototype.send_send = function(tests) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('send', Thrift.MessageType.CALL, this.seqid());
  var args = new TestService_send_args();
  args.tests = tests;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TestServiceClient.prototype.recv_send = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TestService_send_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TestServiceClient.prototype.sendReceive = function(tests, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendReceive(tests);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendReceive(tests);
  }
};

TestServiceClient.prototype.send_sendReceive = function(tests) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendReceive', Thrift.MessageType.CALL, this.seqid());
  var args = new TestService_sendReceive_args();
  args.tests = tests;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TestServiceClient.prototype.recv_sendReceive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TestService_sendReceive_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendReceive failed: unknown result');
};
TestServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TestServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TestServiceProcessor.prototype.process_test = function(seqid, input, output) {
  var args = new TestService_test_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.test.length === 0) {
    Q.fcall(this._handler.test)
      .then(function(result) {
        var result = new TestService_test_result({success: result});
        output.writeMessageBegin("test", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.test(function (err, result) {
      if (err == null) {
        var result = new TestService_test_result((err != null ? err : {success: result}));
        output.writeMessageBegin("test", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TestServiceProcessor.prototype.process_send = function(seqid, input, output) {
  var args = new TestService_send_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.send.length === 1) {
    Q.fcall(this._handler.send, args.tests)
      .then(function(result) {
        var result = new TestService_send_result({success: result});
        output.writeMessageBegin("send", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.send(args.tests, function (err, result) {
      if (err == null) {
        var result = new TestService_send_result((err != null ? err : {success: result}));
        output.writeMessageBegin("send", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TestServiceProcessor.prototype.process_sendReceive = function(seqid, input, output) {
  var args = new TestService_sendReceive_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendReceive.length === 1) {
    Q.fcall(this._handler.sendReceive, args.tests)
      .then(function(result) {
        var result = new TestService_sendReceive_result({success: result});
        output.writeMessageBegin("sendReceive", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendReceive", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendReceive(args.tests, function (err, result) {
      if (err == null) {
        var result = new TestService_sendReceive_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendReceive", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendReceive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

