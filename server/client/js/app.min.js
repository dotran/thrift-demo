function checkRestricted(e,t,n){var o=t.defer();return e.getToken()?o.resolve():(o.reject(),n.url("/")),o.promise}function checkedLoggedIn(e,t,n){var o=t.defer();return e.getToken()?(o.reject(),n.url("/tasks")):o.resolve(),o.promise}function UserService(e,t,n){function o(t){e.defaults.headers.common.Authorization=t}function r(){return e.defaults.headers.common.Authorization}function a(t){return e.post(u+"/login",t).then(function(e){var t=e.data;return n.set("at",t.token),o(t.token),t},throwError)}function s(t){return e.post(u+"/signup",t).then(function(e){var t=e.data;return n.set("at",t.token),o(t.token),t},throwError)}function i(){var e=n.get("at");return null===e||void 0===e||r()&&r()===e||o(e),null!==e&&void 0!==e}function l(){return e.post(u+"/logout").then(function(){return n.remove("at"),o(void 0),!0},function(){return n.remove("at"),o(void 0),!0})}var u=t+"/users";return{login:a,signup:s,getToken:i,logout:l}}function TasksService(e,t,n){function o(){return e.get(s).then(function(e){return e.data},throwError)}function r(t){return e.post(s,{name:t}).then(function(e){return e.data},throwError)}function a(t){var n={};return t.id&&(n.id=t.id),t.name&&(n.name=t.name),null!==t.done&&void 0!==t.done&&(n.done=t.done),e.put(s,n).then(function(e){return e.data},throwError)}var s=t+"/tasks";return{all:o,add:r,update:a}}function throwError(e){throw e.status+" : "+e.data}function LoginController(e,t,n){function o(){e.login(a.credentials).then(function(e){console.log(e),t.path("/tasks")},a.showToast)}function r(){e.signup(a.credentials).then(function(e){console.log(e),t.path("/tasks")},a.showToast)}var a=this;angular.extend(a,n),a.submitLogin=o,a.submitSignup=r,a.credentials={username:"",password:""}}function TasksController(e,t,n,o){var r=this;angular.extend(r,o),r.items=[],r.selected=void 0,r.backup=null,r.loaded=!1,r.refresh=function(){e.all().then(function(e){r.items=[].concat(e),r.loaded=!0},r.showToast)},r.refresh(),r.isTaskSelected=function(e){return null===r.selected||void 0===r.selected?!1:r.selected.id&&r.selected.id===e.id},r.addNew=function(t){var o=n.prompt().title("What is the new task?").placeholder("task").ariaLabel("Task name").targetEvent(t).ok("Add").cancel("Cancel");n.show(o).then(function(t){t&&t.trim()&&e.add(t).then(function(e){r.items.unshift(e)},r.showToast)})},r.checkTask=function(t,n){n.stopImmediatePropagation(),t.done=!t.done,e.update(t).then(function(e){},function(e){t.done=!t.done,r.showToast(e)})},r.updateTask=function(t){e.update(t).then(function(e){},r.showToast)},r.edit=function(t,o){if(t){o.stopImmediatePropagation(),r.backup=t.name;var a=n.prompt().title("Edit the task?").placeholder("task").textContent("Current: "+t.name).ariaLabel("Task name").targetEvent(o).ok("Add").cancel("Cancel");n.show(a).then(function(n){n&&n.trim()&&(t.name=n,e.update(t).then(function(e){},function(e){t.name=r.backup,r.showToast(e)}))})}}}function LogoutController(e,t,n){function o(){e.getToken()&&e.logout().then(function(e){t.path("/")},r.showToast)}var r=this;angular.extend(r,n),r.logoutUser=o}angular.module("TasksApp",["ngMaterial","LocalStorageModule","ngRoute","ngMessages"]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"views/login.html",resolve:{loggedIn:["UserService","$q","$location",checkedLoggedIn]}}).when("/signup",{templateUrl:"views/signup.html",resolve:{loggedIn:["UserService","$q","$location",checkedLoggedIn]}}).when("/tasks",{templateUrl:"views/tasks.html",controller:"TasksCtrl as tc",resolve:{loggedIn:["UserService","$q","$location",checkRestricted]}}).otherwise({redirectTo:"/"})}]).config(["$mdThemingProvider",function(e){e.theme("default").primaryPalette("blue-grey").accentPalette("light-green").backgroundPalette("blue-grey")}]),angular.module("TasksApp").service("UserService",["$http","apiUrl","localStorageService",UserService]),angular.module("TasksApp").service("TasksService",["$http","apiUrl","UserService",TasksService]),angular.module("TasksApp").service("ToastDisplay",["$mdToast",function(e){return{showToast:function(t){e.show(e.simple().textContent(t).position("top").hideDelay(4e3))}}}]),angular.module("TasksApp").controller("LoginCtrl",["UserService","$location","ToastDisplay",LoginController]),angular.module("TasksApp").controller("TasksCtrl",["TasksService","$location","$mdDialog","ToastDisplay",TasksController]),angular.module("TasksApp").controller("LogoutCtrl",["UserService","$location","ToastDisplay",LogoutController]),angular.module("TasksApp").constant("apiUrl","");